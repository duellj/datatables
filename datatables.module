<?php
// $Id: datatables.module,v 1.1 2009/12/15 07:21:47 duellj Exp $

/**
 * @file
 * Provides integration of the jQuery DataTables plugin
 */

/**
 * Implementation of hook_theme().
 */
function datatables_theme() {
  return array(
    'datatable' => array(
      'arguments' => array($header => NULL, $rows => NULL, $attributes => $caption),
    ),
  );
}

/**
 * Implementation of hook_views_api().
 */
function datatables_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'datatables') .'/views',
  );
}

/**
 * Return a themed DataTable
 */
function theme_datatable($header, $rows, $attributes = array(), $caption = NULL) {
  $datatable_options = $attributes['datatable_options'];
  
  // Column settings can either be set with the global options
  // or in each header definition.
  if (!$datatable_options['aoColumns']) {
    foreach ($header as $key => $cell) {
      $datatable_options['aoColumns'][] = $cell['datatable_options'];
      unset($header[$key]['datatable_options']);
    }
  }
  
  // Set unique id
  $attributes['id'] = datatables_get_id();

  drupal_add_css(drupal_get_path('module', 'datatables') .'/dataTables/media/css/demo_table.css');
  drupal_add_js(drupal_get_path('module', 'datatables') .'/dataTables/media/js/jquery.dataTables.js');
  drupal_add_js(drupal_get_path('module', 'datatables') .'/js/datatables.js');
  drupal_add_js(array('datatables' => array('#'. $attributes['id'] => $datatable_options)), 'setting');
  
  return theme('table', $header, $rows, $attributes, $caption);
}

/**
 * Display a view as a datatable style.
 */
function template_preprocess_datatables_view(&$vars) {
  $view     = $vars['view'];

  // We need the raw data for this grouping, which is passed in as $vars['rows'].
  // However, the template also needs to use for the rendered fields.  We
  // therefore swap the raw data out to a new variable and reset $vars['rows']
  // so that it can get rebuilt.
  $result   = $vars['rows'];
  $vars['rows'] = array();

  $options  = $view->style_plugin->options;
  $handler  = $view->style_plugin;

  $fields   = &$view->field;
  $columns  = $handler->sanitize_columns($options['columns'], $fields);

  $active   = !empty($handler->active) ? $handler->active : '';
  $order    = !empty($handler->order) ? $handler->order : 'asc';

  // Fields must be rendered in order as of Views 2.3, so we will pre-render
  // everything.
  $renders = array();
  $keys = array_keys($view->field);
  foreach ($result as $count => $row) {
    foreach ($keys as $id) {
      $renders[$count][$id] = $view->field[$id]->theme($row);
    }
  }
  
  $position = 0;
  foreach ($columns as $field => $column) {
    $column_options = NULL;
    // render the header labels
    if ($field == $column && empty($fields[$field]->options['exclude'])) {
      $vars['header'][$field] = check_plain(!empty($fields[$field]) ? $fields[$field]->label() : '');
      if (empty($options['info'][$field]['sortable']) || !$fields[$field]->click_sortable()) {
        $column_options['bSortable'] = FALSE;
      }
      else {
        // Check if rendered field has html
        if (strlen($handler->rendered_fields[0][$field]) != strlen(strip_tags($handler->rendered_fields[0][$field]))) {
          $column_options['sType'] = 'html';
        }
        $column_options['bSortable'] = TRUE;
        $column_options['asSorting'] = $order;
      }
    }

    $datatable_options['aoColumns'][] = $column_options;

    // Create a second variable so we can easily find what fields we have and what the
    // CSS classes should be.
    $vars['fields'][$field] = views_css_safe($field);
    if ($active == $field) {
      $vars['fields'][$field] .= ' active';
    }

    // Render each field into its appropriate column.
    foreach ($result as $num => $row) {
      if (!empty($fields[$field]) && empty($fields[$field]->options['exclude'])) {
        $field_output = $renders[$num][$field];

        // Don't bother with separators and stuff if the field does not show up.
        if (empty($field_output) && !empty($vars['rows'][$num][$column])) {
          continue;
        }

        // Place the field into the column, along with an optional separator.
        if (!empty($vars['rows'][$num][$column])) {
          if (!empty($options['info'][$column]['separator'])) {
            $vars['rows'][$num][$column] .= filter_xss_admin($options['info'][$column]['separator']);
          }
        }
        else {
          $vars['rows'][$num][$column] = '';
        }

        $vars['rows'][$num][$column] .= $field_output;
      }
    }
    $position++;
  }
  
  $datatable_options['bInfo'] = $options['table_info'];
  
  foreach ($vars['rows'] as $num => $row) {
    $vars['row_classes'][$num][] = ($num % 2 == 0) ? 'odd' : 'even';
  }

  $vars['class'] = 'views-table';
  $vars['id'] = datatables_get_id();

  drupal_add_css(drupal_get_path('module', 'datatables') .'/dataTables/media/css/demo_table.css');
  drupal_add_js(drupal_get_path('module', 'datatables') .'/dataTables/media/js/jquery.dataTables.js');
  drupal_add_js(drupal_get_path('module', 'datatables') .'/js/datatables.js');
  drupal_add_js(array('datatables' => array('#'. $vars['id'] => $datatable_options)), 'setting');
}

/**
 * Returns an unique DataTable id
 */
function datatables_get_id() {
  static $datatable_id;
  return 'datatable-'. ++$datatable_id;
}